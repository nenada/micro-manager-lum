// Recursion speed test with hardware control
// The script sends commands to arduino to switch channels and drive the camera
// Assumes we are using the configuration "targa-rcr.cfg"

void setSequenceMode(String cam) {
	mmc.setProperty(cam, "TRIGGER SOURCE", "EXTERNAL");
	mmc.setProperty(cam, "TRIGGER ACTIVE", "LEVEL");
	mmc.setProperty(cam, "TriggerPolarity", "POSITIVE");
}

void setStandardMode(String cam) {
	mmc.setProperty(cam, "TRIGGER SOURCE", "SOFTWARE");
	mmc.setProperty(cam, "TRIGGER ACTIVE", "EDGE");
	mmc.setProperty(cam, "TriggerPolarity", "NEGATIVE");
}


numberOfSites = 10;
cameraExposureMs = 1.0;
colors = new String[] {"RED", "GREEN", "CYAN"};
intensities = new int[] {500, 500, 700};
ttlExposuresMs = new double[] {1, 1, 1};
zPos = new double[] {0.0, -5.0, 5.0}; // TODO: snake
ttlDevice = "TTLSwitch";
xyStage = mmc.getXYStageDevice();
zStage = mmc.getFocusDevice();
camera = mmc.getCameraDevice();

// run xy stage in a 2.25 mm well pitch square
xPos = new double[] {2250, 0.0, -2250, 0.0};
yPos = new double[] {0.0, 2250, 0.0, -2250};

// Program the Arduino
startT = java.lang.System.currentTimeMillis();
sequenceCmd = new java.lang.StringBuilder();
for (i=0; i<colors.length; i++) {
	sequenceCmd.append(colors[i]).append(" ");
	mmc.setProperty(ttlDevice, colors[i] + "_Intensity", intensities[i]);
	mmc.setProperty(ttlDevice, colors[i] + "_ExposureMs", ttlExposuresMs[i]);
}
mmc.setProperty(ttlDevice, "ChannelSequence", sequenceCmd.toString());
progArdTime = java.lang.System.currentTimeMillis() - startT;
print("Programming TTL sequence took [ms]: " + progArdTime);  

// move stage and acquire images
// TODO: save images to dataset on disk
print("Starting the acquisition, please wait for up to 20 sec...");
mmc.setXYPosition(xyStage, 0.0, 0.0);
mmc.waitForDevice(xyStage);

// set the camera in sequence mode with external exposure control
// mmc.setConfig("CameraMode", "Sequence");
setSequenceMode(camera);

// start the camera
mmc.clearCircularBuffer();
mmc.startContinuousSequenceAcquisition(0);

// iterate over sites
totalSiteTime = 0.0;
for (i=0; i<numberOfSites; i++) {
	print("\nSite " + (i + 1));
	// move to well
	startT = java.lang.System.currentTimeMillis();
	mmc.setXYPosition(xPos[i%4], yPos[i%4]);
	mmc.waitForDevice(xyStage);
	xyMoveT = java.lang.System.currentTimeMillis() - startT;
	print("\tXY move [ms]: " + xyMoveT);
	stackTotalT = 0.0;
	imageStackTotalT = 0.0;
	
	for (f=0; f<zPos.length; f++) {
		startT = java.lang.System.currentTimeMillis();
		mmc.setPosition(zStage, zPos[f]);
		mmc.waitForDevice(zStage);
		zMoveT = java.lang.System.currentTimeMillis() - startT;
		print("\t\tZ move [ms]: " + zMoveT);
		stackTotalT += zMoveT;
	
		// take images
      startTImg = java.lang.System.currentTimeMillis();
      mmc.setProperty(ttlDevice, "RunSequence", "1"); // this sends GO cammand to TTLSwitch
      arduinoTime = java.lang.System.currentTimeMillis() - startTImg;
      print("\t\tArduino GO [ms]: " + arduinoTime);

      // retrieve images
      startTImg = java.lang.System.currentTimeMillis();
		for (c=0; c<colors.length; c++) {
			int retries = 0;
      	int maxRetries = 100;
      	while ((mmc.getRemainingImageCount() == 0) && (retries < maxRetries)) {
         	mmc.sleep(1);
         	retries++;
      	}
      	if (retries >= maxRetries) {
      		print("Error: timeout waiting for images");
      	} else {
				img = mmc.popNextImage();
            // TODO: save image to disk
      	}
		}
		imageRetrieveTime = java.lang.System.currentTimeMillis() - startTImg;
		print("\t\tRetrieve [ms]: " + imageRetrieveTime);
		imageStackT = imageRetrieveTime + arduinoTime;
		print("\t\tImagex3 [ms]: " + imageStackT);
		imageStackTotalT += imageStackT;
	}
	print("\tZ stack [ms]: " + stackTotalT);
	print("\t=====");
	print("\timaging [ms]: " + imageStackTotalT);
	print("\tmotion [ms]: " + (xyMoveT + stackTotalT));
	siteTime = imageStackTotalT + xyMoveT + stackTotalT;
	print("\tSite time [ms]: " + siteTime);
	totalSiteTime += siteTime;
	
}

print("Please wait, stopping the camera (may take a minute)...");
mmc.stopSequenceAcquisition();
setStandardMode(camera);
print("Average site time [ms] :" + totalSiteTime/numberOfSites);

print("Done.");